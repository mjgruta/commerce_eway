<?php

/**
 * Define setting defaults.
 */
define('COMMERCE_PAYMENT_EWAY_MODE_DEFAULT', 'cvn_xml');
define('COMMERCE_PAYMENT_EWAY_LOGO_DEFAULT', 1);
define('COMMERCE_PAYMENT_EWAY_CHANGE_ORDER_STATUS_DEFAULT', 1);
define('COMMERCE_PAYMENT_EWAY_RECURRING_ENABLED_DEFAULT', 0);
define('COMMERCE_PAYMENT_EWAY_SHOW_FAIL_MESSAGE_DEFAULT', 1);
define('COMMERCE_PAYMENT_EWAY_TEST_MODE_DEFAULT', 0);
define('COMMERCE_PAYMENT_EWAY_TEST_APPROVE_ANYWAY_DEFAULT', 0);

/**
 * Define testing values.
 */
define('COMMERCE_PAYMENT_EWAY_TEST_CUSTOMER_ID', '87654321');
define('COMMERCE_PAYMENT_EWAY_TEST_PASSWORD', 'test123');
define('COMMERCE_PAYMENT_EWAY_TEST_EMAIL_ADDRESS', 'test@eway.com.au');
define('COMMERCE_PAYMENT_EWAY_TEST_CCNUMBER', '4444333322221111');

/**
 * Define watchdog options.
 */
define('COMMERCE_PAYMENT_EWAY_WATCHDOG_STATUS_OFF', 0);
define('COMMERCE_PAYMENT_EWAY_WATCHDOG_STATUS_ALL', 1);
define('COMMERCE_PAYMENT_EWAY_WATCHDOG_STATUS_TEST', 2);


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payment_eway_commerce_payment_method_info() {
  return array(
    'commerce_payment_eway' => array(
      'title' => t('eWAY Payment Gateway'),
      'short_title' => t('eWAY'),
      'display_title' => t('Credit card'),
      'description' => t('Provides integration with the eWAY payment gateway.'),
      'active' => TRUE,
    ),
  );
}


/**
 * Payment method callback: settings form.
 */
function commerce_payment_eway_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'customer_id' => '',
    'email_address' => '',
    'password' => '',
    'mode' => COMMERCE_PAYMENT_EWAY_MODE_DEFAULT,
    'status' => COMMERCE_PAYMENT_EWAY_CHANGE_ORDER_STATUS_DEFAULT,
    'show_fail_message' => COMMERCE_PAYMENT_EWAY_SHOW_FAIL_MESSAGE_DEFAULT,
    'logo' => COMMERCE_PAYMENT_EWAY_LOGO_DEFAULT,
    'eway_recurring' => array (
      'recurring_enabled' => COMMERCE_PAYMENT_EWAY_RECURRING_ENABLED_DEFAULT,
    ),
    'eway_testing' => array (
      'test_mode' => COMMERCE_PAYMENT_EWAY_TEST_MODE_DEFAULT,
      'test_mode_display_msg' => 1,
      'test_approve_anyway' => COMMERCE_PAYMENT_EWAY_TEST_APPROVE_ANYWAY_DEFAULT,
    ),
    'eway_watchdog' => array (
      'watchdog_status' => COMMERCE_PAYMENT_EWAY_WATCHDOG_STATUS_ALL,
    ),
  );

  $form['customer_id'] = array(
    '#type' => 'textfield',
    '#title' => t('eWAY Customer ID'),
    '#default_value' => $settings['customer_id'],
    '#description' => t('Your eWAY customer ID. Provided to you by eWAY.'),
  );
  $form['email_address'] = array(
    '#type' => 'textfield',
    '#title' => t('eWAY email login'),
    '#default_value' => $settings['email_address'],
    '#description' => t('The email address you use to login to eWAY.'),
  );
  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('eWAY password'),
    '#default_value' => $settings['password'],
    '#description' => t('The password you use to login to eWAY.'),
  );
  $form['mode'] = array(
    '#type' => 'select',
    '#title' => t('eWAY mode'),
    '#description' => t('eWAY mode used for processing orders. Options are detailed <a href="@url">here</a>.', array('@url' => 'http://www.eway.com.au/Developer/LinkingtoeWAY/overview.aspx')),
    '#options' => array(
      'merchant_xml' => t('Merchant Hosted (XML)'),
      'cvn_xml' => t('CVN (XML)'),
      'beagle' => t('Beagle Anti-Fraud'),
    ),
    '#default_value' => $settings['mode'],
  );
  $form['status'] = array(
    '#type' => 'select',
    '#title' => t('Change order status to "Payment Received" upon successful transaction?'),
    '#description' => t('Change the status of the order if the payment is successful?'),
    '#options' => array(
      1 => t('Yes'),
      0 => t('No'),
    ),
    '#default_value' => $settings['status'],
  );
  $form['show_fail_message'] = array(
    '#type' => 'checkbox',
    '#title' => t("Show gateway's response message on transaction fail."),
    '#description' => t('Systems such as ubercart will show a friendly transaction failed message and may not require an additional message.'),
    '#default_value' => $settings['show_fail_message'],
  );
  $form['logo'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display eWAY Logo?'),
    '#description' => t('Displays the eWay logo when processing credit cards. This may be required for some people depending on your terms with eWAY.'),
    '#default_value' => $settings['logo'],
  );

  // NuSOAP library status.
  $status = file_exists(_commerce_payment_eway_nusoap_path());
  $nusoap_msg = $status ? t('NuSOAP library found.') : t('NuSOAP library not found. Make sure that the <a href="@libraries_url">Libraries API module</a> is installed and the <a href="@nusoap_url">NuSOAP library</a> is installed in %libraries_dir', array('@libraries_url' => url('http://drupal.org/project/libraries'), '@nusoap_url' => url('http://sourceforge.net/projects/nusoap/'), '%libraries_dir' => 'sites/all/libraries/nusoap'));
  $form['eway_recurring'] = array(
    '#type' => 'fieldset',
    '#title' => t('Recurring Billing settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['eway_recurring']['recurring_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable recurring billing support'),
    '#description' => t('Enables support for recurring payments via <a href="@url">eWAY Token Payments</a>.', array('@url' => url('http://www.eway.com.au/Developer/eway-api/token-payments.aspx'))) . '<br />' . t('Note that this requires the NuSOAP library to be correctly installed and configured. See README.txt in the commerce_eway module directory for instructions.'),
    '#default_value' => $settings['eway_recurring']['recurring_enabled'],
    '#disabled' => (!$status && !$settings['eway_recurring']['recurring_enabled']),
  );
  $form['eway_recurring']['recurring_nusoap_status'] = array(
    '#type' => 'markup',
    '#markup' => $nusoap_msg,
    '#prefix' => '<div>',
    '#suffix' => '</div>',
  );

  $form['eway_testing'] = array(
    '#type' => 'fieldset',
    '#title' => t('eWAY Testing settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['eway_testing']['test_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Put the eWAY payment gateway into test mode?'),
    '#description' => t('When in testing mode, transactions are not processed. The testing eWAY customer ID (87654321) and testing Credit Card Number (4444333322221111) are used for all transactions, overriding the existing settings. Please note there is currently no test service for the %beagle eWAY mode.', array('%beagle' => 'Beagle Anti-Fraud')),
    '#default_value' => $settings['eway_testing']['test_mode'],
  );
  $form['eway_testing']['test_mode_display_msg'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display a message to the user when in test mode?'),
    '#description' => t('If checked, when a payment is sent to eWAY in testing mode a message will be displayed to the user to tell them that it is in test mode.'),
    '#default_value' => $settings['eway_testing']['test_mode_display_msg'],
  );
  $form['eway_testing']['test_approve_anyway'] = array(
    '#type' => 'checkbox',
    '#title' => t('When in test mode, approve "failed" transactions anyway?'),
    '#description' => t('When in testing mode, a successful transaction will still return a fail. This overcomes that.'),
    '#default_value' => $settings['eway_testing']['test_approve_anyway'],
  );

  $form['eway_watchdog'] = array(
    '#type' => 'fieldset',
    '#title' => t('eWAY Watchdog Logging'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['eway_watchdog']['watchdog_status'] = array(
    '#type' => 'select',
    '#title' => t('Watchdog status'),
    '#options' => array(
      COMMERCE_PAYMENT_EWAY_WATCHDOG_STATUS_OFF => t('Never log messages'),
      COMMERCE_PAYMENT_EWAY_WATCHDOG_STATUS_ALL => t('Always log messages'),
      COMMERCE_PAYMENT_EWAY_WATCHDOG_STATUS_TEST => t('Only log messages when in test mode'),
    ),
    '#description' => t('Specify when to log messages to the watchdog log.'),
    '#default_value' => $settings['eway_watchdog']['watchdog_status'],
  );

  return $form;
}


/**
 * Returns the path of the NuSOAP library.
 */
function _commerce_payment_eway_nusoap_path() {
  if (function_exists('libraries_get_path')) {
    return libraries_get_path('nusoap') . '/lib/nusoap.php';
  }
  return '';
}


/**
 * Implements hook_menu().
 */
function commerce_payment_eway_menu() {
  $items = array();
  return $items;
}

